[keyword][]Include Libraries=import java.util.*;import org.springframework.http.ResponseEntity;import com.jda.mobility.framework.extensions.utils.*;import com.jda.mobility.framework.extensions.model.*;import org.springframework.http.HttpEntity;global List<String> apiList;dialect "java";expander apicondgrammar.dsl;
[keyword][]Step "{stepName}"=rule "{stepName}"
[keyword][]Priority {num}=salience {num}
[keyword][]Orchestration "{orchName}"=agenda-group "{orchName}"
[condition][]Continue if the api execution succeeds=prodApiWrkMemRequest: ProdApiWrkMemRequest(responseError==true);
[consequence][]Get "{attributeName}" that "{position}" "{pattern}"=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getJsonNodeModifier().findEntitiesMatchingPattern(prodApiWrkMemRequest.getApiResponse(),"{pattern}","{position}","{attributeName}"));
[consequence][]Invoke "{apiName}" API of "{registryName}" registry and generate response=prodApiWrkMemRequest.getApiResponseMap().put("{apiName}",(prodApiWrkMemRequest.getProductAPIServiceInvoker().invokeApi(prodApiWrkMemRequest.getApiInput().get("{apiName}"), "{registryName}", prodApiWrkMemRequest.getLayer(), prodApiWrkMemRequest.getProdAuthCookie(), prodApiWrkMemRequest.getBearerToken(), prodApiWrkMemRequest.getTenant())));update(prodApiWrkMemRequest);prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getProductAPIServiceInvoker().jsonNodeConverter(prodApiWrkMemRequest.getApiResponseMap()));prodApiWrkMemRequest.setResponseError(prodApiWrkMemRequest.getJsonNodeModifier().errorFlagModifier(prodApiWrkMemRequest.getApiResponse()));update(prodApiWrkMemRequest);
[consequence][]Invoke "{apiName}" API of "{registryName}" registry=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getProductAPIServiceInvoker().invokeApi(prodApiWrkMemRequest.getApiInput().get("{apiName}"), "{registryName}", prodApiWrkMemRequest.getLayer(), prodApiWrkMemRequest.getProdAuthCookie(), prodApiWrkMemRequest.getBearerToken(), prodApiWrkMemRequest.getTenant())); prodApiWrkMemRequest.setResponseError(prodApiWrkMemRequest.getJsonNodeModifier().errorFlagModifier(prodApiWrkMemRequest.getApiResponse()));update(prodApiWrkMemRequest);
[consequence][]InvokeWithLayer "{apiName}" API of "{registryName}" registry in "{layer}" layer and generate response=prodApiWrkMemRequest.getApiResponseMap().put("{apiName}",(prodApiWrkMemRequest.getProductAPIServiceInvoker().invokeApi(prodApiWrkMemRequest.getApiInput().get("{apiName}"), "{registryName}", "{layer}", prodApiWrkMemRequest.getProdAuthCookie(), prodApiWrkMemRequest.getBearerToken(), prodApiWrkMemRequest.getTenant())));update(prodApiWrkMemRequest);prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getProductAPIServiceInvoker().jsonNodeConverter(prodApiWrkMemRequest.getApiResponseMap()));prodApiWrkMemRequest.setResponseError(prodApiWrkMemRequest.getJsonNodeModifier().errorFlagModifier(prodApiWrkMemRequest.getApiResponse()));update(prodApiWrkMemRequest);
[consequence][]InvokeWithLayer "{apiName}" API of "{registryName}" registry in "{layer}" layer=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getProductAPIServiceInvoker().invokeApi(prodApiWrkMemRequest.getApiInput().get("{apiName}"), "{registryName}", "{layer}", prodApiWrkMemRequest.getProdAuthCookie(), prodApiWrkMemRequest.getBearerToken(), prodApiWrkMemRequest.getTenant())); prodApiWrkMemRequest.setResponseError(prodApiWrkMemRequest.getJsonNodeModifier().errorFlagModifier(prodApiWrkMemRequest.getApiResponse()));update(prodApiWrkMemRequest);
[consequence][]Replace "{param}" input in "{apiName}" API=prodApiWrkMemRequest.getApiInput().put("{apiName}",prodApiWrkMemRequest.getProductAPIServiceInvoker().replaceParam(prodApiWrkMemRequest.getApiInput().get("{apiName}"), "{param}",prodApiWrkMemRequest.getOutputParam1()));update(prodApiWrkMemRequest);
[consequence][]Get value at {nodePath} from "{apiName}" response=prodApiWrkMemRequest.setOutputParam1(prodApiWrkMemRequest.getProductAPIServiceInvoker().getJSONNodeValue(prodApiWrkMemRequest.getApiResponseMap().get("{apiName}"),{nodePath}));update(prodApiWrkMemRequest);
[consequence][]store output from {nodePath} in outputparam=prodApiWrkMemRequest.setOutputParam1(prodApiWrkMemRequest.getProductAPIServiceInvoker().getJSONNodeValue(prodApiWrkMemRequest.getApiResponse(),{nodePath}));update(prodApiWrkMemRequest);
[consequence][]Add "{attribute}" to request fetched from response at "{nodePath}"=prodApiWrkMemRequest.getApiInputBody().put("{attribute}", prodApiWrkMemRequest.getApiResponse().at("{nodePath}"));update(prodApiWrkMemRequest);
[consequence][]Create request body from the added attributes list=prodApiWrkMemRequest.setApiRequest(prodApiWrkMemRequest.getJsonNodeModifier().jsonNodeConverter(prodApiWrkMemRequest.getApiInputBody()));update(prodApiWrkMemRequest);
[consequence][]Encode the request body to base 64 format and store in outputparam=prodApiWrkMemRequest.setOutputParam1(prodApiWrkMemRequest.getJsonNodeModifier().encode(prodApiWrkMemRequest.getApiRequest()));
[consequence][]Store {property} from apiResponse "{nodePath}" in outputParam1=prodApiWrkMemRequest.setOutputParam1(prodApiWrkMemRequest.getProductAPIServiceInvoker().getJSONNodeValue(prodApiWrkMemRequest.getApiResponse(),"{nodePath}"));update(prodApiWrkMemRequest);
[consequence][]Include "{apiName}" for OrchestrationExecution=prodApiWrkMemRequest.getApiInput().put("{apiName}",prodApiWrkMemRequest.getProductAPIServiceInvoker().buildRequest("{apiName}"));update(prodApiWrkMemRequest);
[consequence][]Say "{message}"=System.out.println("{message}");
[consequence][]Calculate the load capacity by subtracting "{fieldNameToBeSubracted}" from "{fieldNameToBeSubractedFrom}" and add it as "{fieldNameToBeAdded}" to "{apiName}" response=prodApiWrkMemRequest.getApiResponseMap().put("{apiName}", prodApiWrkMemRequest.getJsonNodeModifier().addLimit("{fieldNameToBeSubractedFrom}", "{fieldNameToBeSubracted}", prodApiWrkMemRequest.getApiResponseMap().get("{apiName}"), "{fieldNameToBeAdded}" ));update(prodApiWrkMemRequest);
[consequence][]Calculate the number of "{fieldNameToBeFetched}" from "{apiName}" response and add it as "{fieldNameToBeAdded}" to the response=prodApiWrkMemRequest.getApiResponseMap().put("{apiName}", prodApiWrkMemRequest.getJsonNodeModifier().addCount("{fieldNameToBeAdded}", "{fieldNameToBeFetched}", prodApiWrkMemRequest.getApiResponseMap().get("{apiName}")));update(prodApiWrkMemRequest);
[consequence][]Show Response of the API "{apiName}"=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getApiResponseMap().get("{apiName}"));
[consequence][]AddWithLayer "{apiName}" API of "{registry}" registry in "{layer}" layer for parallel API execution=prodApiWrkMemRequest.getRegistryLayerMap().put("{apiName}", new RegistryMap("{registry}", "{layer}"));update(prodApiWrkMemRequest);
[consequence][]Add "{apiName}" API of "{registry}" registry for parallel API execution=prodApiWrkMemRequest.getRegistryLayerMap().put("{apiName}", new RegistryMap("{registry}", prodApiWrkMemRequest.getLayer()));update(prodApiWrkMemRequest);
[consequence][]Invoke APIs in parallel and generate response=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getProductAPIServiceInvoker().executeParallel(prodApiWrkMemRequest.getApiInput(), prodApiWrkMemRequest.getProdAuthCookie(), prodApiWrkMemRequest.getBearerToken(), prodApiWrkMemRequest.getTenant(), prodApiWrkMemRequest.getRegistryLayerMap()));update(prodApiWrkMemRequest);
[consequence][]Add "{propertyName}" of type "{propertyType}" to the "{apiName}" API request as "{REQUESTBODYorPATHorQUERY}" with stored value=prodApiWrkMemRequest.getApiInput().put("{apiName}", prodApiWrkMemRequest.getProductAPIServiceInvoker().addParametersToInput(prodApiWrkMemRequest.getApiInput().get("{apiName}"),"{propertyName}",prodApiWrkMemRequest.getOutputParam1(),"{REQUESTBODYorPATHorQUERY}","{propertyType}"));update(prodApiWrkMemRequest);
[condition][]Get Inputs=prodApiWrkMemRequest: ProdApiWrkMemRequest()
[condition][]Get conditional Inputs=prodApiWrkMemRequest: ProdApiWrkMemRequest(outputParam1=="true")
[consequence][]Add "{fieldNameToBeInserted}" of type "{fieldType}" to "{apiName}" response at "{nodePath}"=prodApiWrkMemRequest.getApiResponseMap().put("{apiName}", prodApiWrkMemRequest.getJsonNodeModifier().insertField(prodApiWrkMemRequest.getApiResponseMap().get("{apiName}"), "{nodePath}", prodApiWrkMemRequest.getJsonNodeModifier().createJsonNode("{fieldType}",prodApiWrkMemRequest.getOutputParam1()),"{fieldNameToBeInserted}"));prodApiWrkMemRequest.setApiResponseMap(prodApiWrkMemRequest.getApiResponseMap());update(prodApiWrkMemRequest);
[consequence][]Insert "{fieldNameToBeInserted}" with "{fieldValue}" of type "{fieldType}"  at "{nodePath}"=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getJsonNodeModifier().insertField( prodApiWrkMemRequest.getApiResponse(), "{nodePath}", prodApiWrkMemRequest.getJsonNodeModifier().createJsonNode("{fieldType}","{fieldValue}"), "{fieldNameToBeInserted}"));update(prodApiWrkMemRequest);
[consequence][]Copy "{nodePath}" as "{fieldName}" to "{newnodePath}"=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getJsonNodeModifier().copyField(prodApiWrkMemRequest.getApiResponse(), "{fieldName}", "{nodePath}", "{newnodePath}"));update(prodApiWrkMemRequest);
[consequence][]Remove "{fieldNameToBedeleted}" at "{nodePath}"=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getJsonNodeModifier().removeField("{fieldNameToBedeleted}",prodApiWrkMemRequest.getApiResponse(),"{nodePath}"));update(prodApiWrkMemRequest);
[consequence][]Replace "{fieldNameToBeReplaced}" with "{fieldValue}" of type "{fieldType}"  at "{nodePath}"=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getJsonNodeModifier().insertField( prodApiWrkMemRequest.getApiResponse(), "{nodePath}", prodApiWrkMemRequest.getJsonNodeModifier().createJsonNode("{fieldType}","{fieldValue}"), "{fieldNameToBeReplaced}"));update(prodApiWrkMemRequest);
[consequence][]Replace date of "{inputFormat}" to "{outputFormat}" at "{nodePath}"=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getJsonNodeModifier().dateModifier("{inputFormat}","{outputFormat}",prodApiWrkMemRequest.getApiResponse(),"{nodePath}"));update(prodApiWrkMemRequest);
[consequence][]Create RequestObject from keys "{keysSeparatedWithComma}" with  values "{valuesSeparatedWithComma}" of types "{typesSeparatedWithComma}"=prodApiWrkMemRequest.setApiRequest(prodApiWrkMemRequest.getJsonNodeModifier().createObject( "{keysSeparatedWithComma}","{valuesSeparatedWithComma}","{typesSeparatedWithComma}"));update(prodApiWrkMemRequest);
[consequence][]"{PREorPOST}" APPEND  "{valueToBeAppended}" to the value at "{nodePath}"=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getJsonNodeModifier().prePostAppend(prodApiWrkMemRequest.getApiResponse(),"{valueToBeAppended}","{PREorPOST}","{nodePath}"));update(prodApiWrkMemRequest);
[consequence][]pick element "{position}" from the response at "{nodePath}"=prodApiWrkMemRequest.setApiResponse(prodApiWrkMemRequest.getJsonNodeModifier().getJSONNode(prodApiWrkMemRequest.getApiResponse(),"{nodePath}","{position}"));update(prodApiWrkMemRequest);
[consequence][]modify the request=prodApiWrkMemRequest.setApiRequest(prodApiWrkMemRequest.getJsonNodeModifier().requestModification(prodApiWrkMemRequest.getApiRequest()));update(prodApiWrkMemRequest);
[consequence][]Modify "{attribute}" of request to array=prodApiWrkMemRequest.setApiRequest(prodApiWrkMemRequest.getJsonNodeModifier().requestModification (prodApiWrkMemRequest.getApiRequest() ,"{attribute}"));update(prodApiWrkMemRequest);
