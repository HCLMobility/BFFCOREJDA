server.port=8080

# Database
spring.datasource.url=jdbc:sqlserver://${DATASOURCE_URL}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect
spring.jpa.hibernate.ddl-auto=none

spring.flyway.enabled=true
spring.flyway.schemas=mab
spring.flyway.user=${DB_USER}
spring.flyway.password=${DB_PASSWORD}

# Auth
app.scheme=${AUTHENTICATION_STRATEGY:BASIC_AUTH}

# Basic Auth
app.auth.clientId=mobile-api
app.auth.tokenSecret=${INTERNAL_TOKEN_SECRET}
app.auth.tokenExpirationMsec=86400000

# OIDC Auth
app.openid.providerlocation=${OIDC_PROVIDER_URL:NOT_SET}
app.openid.clientId=${OIDC_CLIENT_ID:NOT_SET}
app.openid.clientSecret=${OIDC_CLIENT_SECRET:NOT_USED_CURRENTLY}
app.openid.redirectUri=${OIDC_REDIRECT_URI:NOT_USED_CURRENTLY}
app.openid.authenticationMethod=${OIDC_AUTH_METHOD:NOT_USED_CURRENTLY}
app.openid.audience=${OIDC_AUDIENCE:NOT_SET}
app.openid.scope=${OIDC_SCOPE:openid}

# Session
# Session schema is bootstrapped with the rest of the tables
# in the flyway migration script
spring.session.jdbc.initialize-schema=never

# Product Backend
# The base-url defaults to the empty string so that the server
# can fall back to using product specific configs that may be
# found in the database. In single-tenant deployment scenarios
# it more convenient to specify the base url as an environment
# variable here than to push records into a database that may not
# be bootstrapped yet.
product-apis.base-url=${PRODUCT_BASE_URI:}